// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addToFeed = `-- name: AddToFeed :exec
 INSERT INTO feed (user_id , yap_id)
VALUES($1,$2)
`

type AddToFeedParams struct {
	UserID uuid.UUID
	YapID  uuid.UUID
}

func (q *Queries) AddToFeed(ctx context.Context, arg AddToFeedParams) error {
	_, err := q.db.ExecContext(ctx, addToFeed, arg.UserID, arg.YapID)
	return err
}

const getFeed = `-- name: GetFeed :many
select y.id, y.created_at, y.updated_at, y.body, y.user_id from yaps y join feed f on y.user_id = f.user_id
where y.user_id = $1 order by y.created_at Desc offset $2 LIMIT 20
`

type GetFeedParams struct {
	UserID uuid.UUID
	Offset int32
}

func (q *Queries) GetFeed(ctx context.Context, arg GetFeedParams) ([]Yap, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Yap
	for rows.Next() {
		var i Yap
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
