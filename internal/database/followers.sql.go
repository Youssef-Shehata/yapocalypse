// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: followers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFollower = `-- name: AddFollower :exec
iNSERT INTO followers (follower_id, followee_id)
VALUES ($1, $2)
`

type AddFollowerParams struct {
	FollowerID uuid.UUID
	FolloweeID uuid.UUID
}

func (q *Queries) AddFollower(ctx context.Context, arg AddFollowerParams) error {
	_, err := q.db.ExecContext(ctx, addFollower, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFolloweesOf = `-- name: GetFolloweesOf :many
SELECT u.id , u.email,u.created_at , u.updated_at , u.username  ,u.premuim from users u join followers f on u.id = f.followee_id where f.follower_id == $1 order by f.created_at DESC
`

type GetFolloweesOfRow struct {
	ID        uuid.UUID
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Premuim   bool
}

func (q *Queries) GetFolloweesOf(ctx context.Context, followerID uuid.UUID) ([]GetFolloweesOfRow, error) {
	rows, err := q.db.QueryContext(ctx, getFolloweesOf, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFolloweesOfRow
	for rows.Next() {
		var i GetFolloweesOfRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Premuim,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersOf = `-- name: GetFollowersOf :many
SELECT u.id , u.email,u.created_at , u.updated_at , u.username  ,u.premuim from users u join followers f on u.id = f.follower_id where f.followee_id == $1 order by f.created_at DESC
`

type GetFollowersOfRow struct {
	ID        uuid.UUID
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
	Premuim   bool
}

func (q *Queries) GetFollowersOf(ctx context.Context, followeeID uuid.UUID) ([]GetFollowersOfRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowersOf, followeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersOfRow
	for rows.Next() {
		var i GetFollowersOfRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Premuim,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
