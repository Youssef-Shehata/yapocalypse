// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tweets.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO Tweets(id, created_at, updated_at, user_id ,body )
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateTweetParams struct {
	UserID uuid.UUID
	Body   string
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.UserID, arg.Body)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getTweetById = `-- name: GetTweetById :one
select id, created_at, updated_at, body, user_id from Tweets where id = $1
`

func (q *Queries) GetTweetById(ctx context.Context, id uuid.UUID) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, getTweetById, id)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getTweets = `-- name: GetTweets :many
select id, created_at, updated_at, body, user_id from Tweets where user_id = $1 order by created_at
`

func (q *Queries) GetTweets(ctx context.Context, userID uuid.UUID) ([]Tweet, error) {
	rows, err := q.db.QueryContext(ctx, getTweets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tweet
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetTweets = `-- name: ResetTweets :exec
DELETE from  Tweets
`

func (q *Queries) ResetTweets(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetTweets)
	return err
}
